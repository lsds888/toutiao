/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* findmidnode(ListNode* head){
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next&&fast->next->next){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    
    ListNode* mergetowlist(ListNode* l1,ListNode* l2){
        ListNode* dummy=new ListNode(0);
        ListNode* p=dummy;
        while(l1&&l2){
            if(l1->val<=l2->val){
                p->next=l1;
                l1=l1->next;
                p=p->next;
            }else{
                p->next=l2;
                l2=l2->next;
                p=p->next;
            }
        }
        if(l1){
            p->next=l1;
            l1=l1->next;
            p=p->next;
        }
        if(l2){
            p->next=l2;
            l2=l2->next;
            p=p->next;
        }
        return dummy->next;
    }
    
    ListNode* sortList(ListNode* head) {
        if(head==NULL||head->next==NULL) return head;
        ListNode* mid=findmidnode(head);
        ListNode* mid_next=mid->next;
        mid->next=NULL;
        ListNode* l1=sortList(head);
        ListNode* l2=sortList(mid_next);
        return mergetowlist(l1,l2);
    }
};
