class Solution {
public:
//时间复杂度：O(n^3),空间复杂度：O(min(n, m))
    bool isunique(string s,int start,int end){
        set<char> set;
        for(int i=start;i<end;i++){
            if(set.find(s[i])!=set.end()){
                return false;
            }else{
                set.insert(s[i]);
            }
        }
        return true;
    }
    int lengthOfLongestSubstring(string s) {
        int n=s.size();
        int m=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<=n;j++){
                if(isunique(s,i,j)){
                    m=max(m,j-i);
                }
            }
        }
        return m;
    }
};
//以上方法超时，用下面的方法

//滑动窗口,时间复杂度：O(2n) = O(n),空间复杂度：O(min(m, n))
    int lengthOfLongestSubstring(string s){
        int n=s.size();
        set<char> set;
        int m=0,i=0,j=0;
        while(i<n&&j<n){
            if(set.find(s[j])==set.end()){
                set.insert(s[j++]);
                m=max(m,j-i);
            }else{
                set.erase(s[i++]);
            }
        }
        return m;
    }
    
    //优化的滑动窗口
        int lengthOfLongestSubstring(string s){
        int n=s.size();
        int m=0;
        unordered_map<char,int> map;
        for(int j=0,i=0;j<n;j++){
            if(map[s[j]]){
                i=max(map[s[j]],i);
            }
            m=max(m,j-i+1);
            map[s[j]]=j+1;
        }
        return m;
    }    
    
